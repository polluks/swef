#!/usr/bin/env lua
--[[
    MIT License
    Copyright (c) 2022 JhonnyRice
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
]]


-- COLORS (B_ stands for BRIGHT_)
local colors = {
    RED      = "\x1b[31m",
    GREEN    = "\x1b[32m",
    YELLOW   = "\x1b[33m",
    BLUE     = "\x1b[34m",
    PURPLE   = "\x1b[35m",
    CYAN     = "\x1b[36m",

    B_RED    = "\x1b[91m",
    B_GREEN  = "\x1b[92m",
    B_YELLOW = "\x1b[93m",
    B_BLUE   = "\x1b[94m",
    B_PURPLE = "\x1b[95m",
    B_CYAN   = "\x1b[96m",

    -- Monochromatic
    BLACK    = "\x1b[30m",
    GRAY     = "\x1b[90m",
    B_GRAY   = "\x1b[37m",
    WHITE    = "\x1b[97m",

    -- Remove all colors
    NOCOL    = "\x1b[0m",
}

-- Fontawesome icons, initialized later: text by default
local icons = {
    os_icon = 'os: ',
    wm_icon = 'wm: ',
    kn_icon = 'kn: ',
    sh_icon = 'sh: ',
}


--[[ STOLEN FROM:: https://stackoverflow.com/a/40195356]]
-- Checks if a file exist
local function exists(file)
    local ok, err, code = os.rename(file, file)
    return ok or code == 13, err
end
-- Checks if a path exists
local function isdir(path)
    return exists(path.."/")
end

local function plan_nine_exists(dir, file)
    --[[
    Basically this function does what exists() does but renames the files to something else,
    instead of their original name. This because Lu9 (Lua for plan9/9Front native) returns the
    same error of a file that does not exists if reanamed in the same name as it was... wtf why?
    Well, at least the concept of root in Plan9/9Front is distorted, so if you rename a protected folder (such as /bin)
    it WILL say that it exceeded renaming that file, but in reality it didn't. strange.
    ]]
    local ok, err, code = os.rename(dir..file, dir.."swefcache")
    os.rename(dir.."swefcache", dir..file)
    return ok --, err
end

-- Opens a command and returns the output
local function opencmd(cmd)
    local command = io.popen(cmd, "r")
    local command_output = command:read("*a")
    command:close()
    command_output = command_output:match("%C+")
    return command_output
end

-- Get massive os family
local function os_family()
    local os_family = package.config:sub(1,1)
    if os_family == "/" then
        return "unix-like"
    elseif os_family == "\\" then
        return "windows"
    end
end

local function linux_bsd_wm()
    local graphic_session = os.getenv("XDG_SESSION_TYPE") -- Get graphic session
    if graphic_session then
        if graphic_session:lower() == "x11" then
            local wm_pid_command = io.popen("ps -e")
            local wm_pids = wm_pid_command:read("*a")
            wm_pid_command:close()
            local non_ewmh_x11_wm_list = {
                "sowm" ,
                "penrose",
                "catwm" ,
                "fvwm" ,
                "dwm" ,
                "2bwm" ,
                "monsterwm" ,
                "tinywm" ,
                "vswm",
                "wmaker",
                "x11fs" ,
                "xmonad"
            }
            for i=1,#non_ewmh_x11_wm_list do
                if wm_pids:lower():find(non_ewmh_x11_wm_list[i]) then
                    wm = non_ewmh_x11_wm_list[i]
                    break
                end
            end
            return wm or opencmd([[xprop -id "$(xprop -root _NET_SUPPORTING_WM_CHECK | cut -d' ' -f5)" _NET_WM_NAME | cut -d'"' -f2]]) or 'unknown'
        elseif graphic_session:lower() == "wayland" then
            local wm_pid_command = io.popen("ps -e")
            local wm_pids = wm_pid_command:read("*a"):lower()
            wm_pid_command:close()
            local wayland_wm_list = {
                "arcan",
                "asc",
                "clayland",
                "dwc",
                "fireplace",
                "gnome%-shell",
                "greenfield",
                "grefsen",
                "hikari",
                "kwin",
                "lipstick",
                "maynard",
                "mazecompositor",
                "motorcar",
                "orbital",
                "orbment",
                "perceptia",
                "river",
                "sway",
                "ulubis",
                "velox",
                "wavy",
                "way%-cooler",
                "wayfire",
                "wayhouse",
                "westeros",
                "westford",
                "weston"
            }
            for i=1,#wayland_wm_list do
                if wm_pids:find(wayland_wm_list[i]) then
                    wm = wayland_wm_list[i]
                    break
                end
            end
            if wm == "gnome%-shell" then
                return "mutter"
            else
                return wm or os.getenv("WAYLAND_DISPLAY") or error(":v")
            end
        else
            -- Sometimes X11 does not set the XDG_SESSION_TYPEvariable, so this is a temporary fix
            return opencmd([[xprop -id "$(xprop -root _NET_SUPPORTING_WM_CHECK | cut -d' ' -f5)" _NET_WM_NAME | cut -d'"' -f2]]) or "unknown"
        end
    else
        -- Graphic session is TTY or unknown
        return "tty"
    end
end


local function macos_wm()
    local wm_pid_command = io.popen("ps -e")
    local wm_pids = wm_pid_command:read("*a"):lower()
    wm_pid_command:close()
    local macos_wm_list = {
        "spectacle",
        "amethyst",
        "kwm",
        "chunkwm",
        "yabai",
        "rectangle"
    }
    for i=1,#macos_wm_list do
        if wm_pids:find(macos_wm_list[i]) then
            wm = macos_wm_list[i]
            break
        end
    end
    return wm or "Quartz Compositor" or error("WTF")
end

local function windows_wm()
    local wm_pid_command = io.popen("tasklist")
    local wm_pids = wm_pid_command:read("*a"):lower()
    wm_pid_command:close()
    local windows_wm_list = {
        "bugn",
        "windawesome",
        "blackbox",
        "emerge",
        "litestep",
    }
    for i=1,#windows_wm_list do
        if wm_pids:find(windows_wm_list[i]) then
            wm = windows_wm_list[i]
            break
        end
    end
    return wm or "explorer" or error("HOW") -- Yes, explorer is the WM of windows. In fact, if you kill explorer you kill the GUI lmao
end

local function windows_version()
    local windows_ver = opencmd("wmic os get Caption /value")
    windows_ver = windows_ver:gsub("Caption=", '')
    return windows_ver
end

local function distro()
    local distro_command = io.open("/etc/os-release", "r") -- I should check lsb_release first
    local distro_temp = distro_command:read("*a")
    distro_command:close()
    local distro = distro_temp:match("NAME.%W?%w+", 1):gsub('"', ''):gsub('NAME=', '')
    return distro
end

local function shell()
    local is_the_global_variable_set = os.getenv("SHELL")
    if not is_the_global_variable_set then
        return "sh"
    elseif exists("/usr/bin/basename") then
        return opencmd("basename $SHELL")
    else
        return "sh"
    end
end
local function fetch()
    local os_type = os_family()
    if os_type == "unix-like" then
        if plan_nine_exists("/bin/ape/", "uname") then -- Is Plan9?
            kernel = opencmd("/bin/ape/uname")
            local fetch = {
                os = 'Plan9',
                wm = 'rio',
                kn = kernel,
                sh = 'rc'
            }
            return fetch
        else -- Other Unix-Like stuff

            -- Get Kernel name
            kern = opencmd("uname")
            -- Get Kernel release
            kern_release = opencmd("uname -r")
            -- Check if the kernel is linux, macos, bsd or other
            if kern:lower() == "linux" then -- Linux Family
                -- Get OS Name (not distro!)
                os_name = opencmd("uname -o")
                if os_name:lower() == "android" then
                    local fetch = {
                        os = "Android",
                        wm = "SurfaceFlinger", -- Apparently this is the window system's name, sooo...
                        kn = kern .. " " .. kern_release,
                        sh = shell()
                    }
                    return fetch

                else -- Regular Linux System
                    local fetch = {
                        os = distro(),
                        wm = linux_bsd_wm(),
                        kn = kern .. " " .. kern_release,
                        sh = shell()
                    }
                    return fetch
                end

            elseif kern:lower() == "darwin" then -- MacOS family
                local fetch = {
                    os = "Mac Os",
                    wm = macos_wm(),
                    kn = kern .. " " .. kern_release,
                    sh = shell()
                }
                return fetch

            elseif kern:lower():find("mingw64") then -- Windows under MinGW
                local fetch = {
                    os = "Windows (mingw)",
                    wm = windows_wm(),
                    kn = "mingw64",
                    sh = shell()
                }
                return fetch
            elseif kern:lower():find("bsd") then -- BSDs (FreeBSD, OpenBSD, NetBSD etc...). They work similarly to Linux
                local fetch = {
                    os = os_name,
                    wm = linux_bsd_wm(),
                    kn = kern .. " " .. kern_release,
                    sh = shell()
                }
                return fetch

            elseif kern:lower():find("haiku") then -- Haiku, aka OpenBeOS
                local fetch = {
                    os = "Haiku",
                    wm = "default",
                    kn = kern .. " " .. kern_release,
                    sh = shell()
                }
                return fetch
            elseif kern:lower():find("morphos") then -- MorphOS, aka Amiga Next Generation
                local fetch = {
                    os = "MorphOS",
                    wm = "default",
                    kn = kern .. " " .. kern_release,
                    sh = "shell"
                }
                return fetch
            else
                local fetch = {
                    os = "You've defeated me...",
                    wm = "(your os is CURRENTLY unsupported)",
                    kn = "(please submit a github issue)",
                    sh = "(on https://www.github.com/JhonnyRice/swef)"
                }
                return fetch
            end
        end
        
    --[[ WINDOWS ]]
    elseif os_type == "windows" then
        local fetch = {
            os = windows_version(),
            wm = windows_wm(),
            kn = "NT",
            sh = "powershell"
        }
        return fetch
    else -- What the f??
        local fetch = {
            os = "you defeated me...",
            wm = "(your os is CURRENTLY unsupported)",
            kn = "(please submit a github issue)",
            sh = "(on https://www.github.com/JhonnyRice/swef)"
        }
        return fetch
        
    end
end


--[[ ===============
    Ascii art time!
   =============== ]]

local function ascii(osname)

    if osname:lower():find("ubuntu") then
        local ascii = {
            colors.YELLOW .. "  /-".. colors.B_RED .."'-" .. colors.RED .. "( )       " .. colors.NOCOL,
            colors.B_RED .. "( )    |        " .. colors.NOCOL,
            colors.YELLOW .. "  \\-".. colors.RED ..".-".. colors.YELLOW .."( )       " .. colors.NOCOL,
            colors.NOCOL .. "                " .. colors.NOCOL
        }
        --   /-'-( )       
        -- ( )    |        
        --   \-.-( )       
        --
        return ascii
    elseif osname:lower():find("arch") then
        local ascii = {
            colors.CYAN .. "   /\\           " .. colors.NOCOL,
            colors.CYAN .. "  /\\ \\          " .. colors.NOCOL,
            colors.CYAN .. " / .. \\         " .. colors.NOCOL,
            colors.CYAN .. "/.'  '.\\        " .. colors.NOCOL
        }
        --    /\     
        --   /\ \  
        --  / .. \ 
        -- /.'  '.\
        return ascii
    elseif osname:lower():find("artix") then
        local ascii = {
            colors.CYAN .. "    /\\           " .. colors.NOCOL,
            colors.CYAN .. "   /_ \\          " .. colors.NOCOL,
            colors.CYAN .. "  /  '_\\         " .. colors.NOCOL,
            colors.CYAN .. " /.-'¯-.\\        " .. colors.NOCOL
        }
        --    /\     
        --   /_ \  
        --  /  '_\ 
        -- /.-'¯-.\
        return ascii
    elseif osname:lower():find("gentoo") then
        local ascii = {
            colors.B_GRAY .. " ,--.           " .. colors.NOCOL,
            colors.B_GRAY .. "( () \\          " .. colors.NOCOL,
            colors.B_GRAY .. " `^  /          " .. colors.NOCOL,
            colors.B_GRAY .. "  '~'           " .. colors.NOCOL
        }
        --  ,--.           
        -- ( () \          
        --  `^  /          
        --   '~'           
        return ascii
    elseif osname:lower():find("fedora") then
        local ascii = {
            colors.BLUE .. "   /¯¯\\         " .. colors.NOCOL,
            colors.BLUE .. " __|__          " .. colors.NOCOL,
            colors.BLUE .. "/  T            " .. colors.NOCOL,
            colors.BLUE .. "\\__/            " .. colors.NOCOL
        }
        --    /¯¯\        
        --  __|__          
        -- /  T            
        -- \__/           
        return ascii
    elseif osname:lower():find("debian") then
        local ascii = {
            colors.RED .. "  _.._        " .. colors.NOCOL,
            colors.RED .. " (    |       " .. colors.NOCOL,
            colors.RED .. " | (_/        " .. colors.NOCOL,
            colors.RED .. "  \\           " .. colors.NOCOL
        }
        --  _.._        
        -- (    |       
        -- | (_/        
        --  \          
        return ascii
    elseif osname:lower():find("alpine") then
        local ascii = {
            colors.BLUE .. " /¯¯¯¯¯¯\\       " .. colors.NOCOL,
            colors.BLUE .. "/  " .. colors.WHITE .. "/\\/\\" .. colors.BLUE .. "  \\      " .. colors.NOCOL,
            colors.BLUE .. "\\ " .. colors.WHITE .. "/  \\ \\" .. colors.BLUE .. " /      " .. colors.NOCOL,
            colors.BLUE .. " \\______/       " .. colors.NOCOL
        }
        --  /¯¯¯¯¯¯\
        -- /  /\/\  \      
        -- \ /  \ \ /
        --  \______/
        return ascii
    elseif osname:lower():find("void") then
        local ascii = {
            colors.B_GREEN .. "   .''-.        " .. colors.NOCOL,
            colors.GREEN .. "/'. " .. colors.B_GREEN .. "_'. \\       " .. colors.NOCOL,
            colors.GREEN .. "\\ '.".. colors.B_GREEN .. "¯ './       " .. colors.NOCOL,
            colors.GREEN .. " '-..'          " .. colors.NOCOL
        }
        --   .''-.
        --/'. _'. \
        --\ '.¯ './
        -- '-..'
        return ascii
    elseif osname:lower():find("slackware") then
        local ascii = {
            colors.BLUE .. "   .___       " .. colors.NOCOL,
            colors.BLUE .. "   |___       " .. colors.NOCOL,
            colors.BLUE .. "   ___|       " .. colors.NOCOL,
            colors.BLUE .. " |____        " .. colors.NOCOL
        }
        --   .___
        --   |___
        --   ___|
        -- |____
        return ascii
    elseif osname:lower():find("nixos") then
        local ascii = {
            colors.BLUE .. "_\\_" .. colors.CYAN .. "\\/      " .. colors.NOCOL,
            colors.CYAN .. "_/  \\".. colors.BLUE .. "/_    " .. colors.NOCOL,
            colors.CYAN .. "/" .. colors.BLUE .. "\\" .. colors.CYAN .. "__" .. colors.BLUE .. "/" .. colors.CYAN .. "_     " .. colors.NOCOL,
            colors.BLUE .. " /\\ " .. colors.CYAN .. "\\      " .. colors.NOCOL
        }
        -- _\_\/
        -- _/  \/_
        -- /\__/_
        --  /\ \
        return ascii
    elseif osname:lower():find("manjaro") then
        local ascii = {
            colors.GREEN .. "|¯¯¯¯¯| |¯|    " .. colors.NOCOL,
            colors.GREEN .. "| |¯¯¯  | |    " .. colors.NOCOL,
            colors.GREEN .. "| | |¯| | |    " .. colors.NOCOL,
            colors.GREEN .. "|_| |_| |_|    " .. colors.NOCOL
        }
        -- |¯¯¯¯¯| |¯|
        -- | |¯¯¯  | |
        -- | | |¯| | |
        -- |_| |_| |_|
        return ascii
    elseif osname:lower():find("plan9") then -- No color because RC (Plan9's shell) does not support colors :(
        local ascii = {
            "  .-'_'-.        " ,
            " /  |_|  \\       ",
            " \\   _|  /       ",
            "  '-. .-'        " 
        }
        --  .-'_'-.
        -- /  |_|  \
        -- \   _|  /
        --  '-. .-'
        return ascii
    elseif osname:lower():find("windows") then
        local ascii = {
            colors.CYAN .. '|"""---....     ' .. colors.NOCOL,
            colors.CYAN .. '|____|____|     ' .. colors.NOCOL,
            colors.CYAN .. '|    T    |     ' .. colors.NOCOL,
            colors.CYAN .. '|...---"""\'     ' .. colors.NOCOL
        }
        --|"""---....     
        --|____|____|     
        --|    T    |     
        --|...---"""'     
        return ascii
    elseif osname:lower():find("mac os") then -- This one's kinda ugly :(
        local ascii = {
            colors.RED    .. '  __()_         ' .. colors.NOCOL,
            colors.YELLOW .. ".'     '.       " .. colors.NOCOL,
            colors.GREEN  .. '|      (        ' .. colors.NOCOL,
            colors.CYAN   .. "'._____.'       " .. colors.NOCOL
        }
        --   __()_        
        -- .'     '.      
        -- |      (       
        -- '._____.'      
        return ascii
    elseif osname:lower():find("android") then
        local ascii = {
            colors.GREEN .. '  \\  _  /     ' .. colors.NOCOL,
            colors.GREEN .. ' .-"" ""-.    ' .. colors.NOCOL,
            colors.GREEN .. '/  O   O  \\   ' .. colors.NOCOL,
            colors.GREEN .. '|_________|   ' .. colors.NOCOL
        }
        --   \  _  /      
        --  .-"" ""-.     
        -- /  O   O  \    
        -- |_________|    
        return ascii
    elseif osname:lower():find("haiku") then
        local ascii = {
            colors.NOCOL .. "| |    |" .. colors.GREEN .. "." .. colors.NOCOL .. "|      " .. colors.NOCOL,
            colors.NOCOL .. "| |" .. colors.GREEN .."_-''.'" .. colors.NOCOL .. "|      " .. colors.NOCOL,
            colors.NOCOL .. "|" .. colors.GREEN .. ".-__-'" .. colors.NOCOL .. "| |      " .. colors.NOCOL,
            colors.NOCOL .. "| |    | |      " .. colors.NOCOL
        }
        --| |    |.|      
        --| |_-''.'|      
        --|.-__-'| |      
        --| |    | |      
        return ascii
    elseif osname:lower():find("morphos") then
        local ascii = {
            colors.BLUE .. " __ \\/ __      " .. colors.NOCOL,
            colors.BLUE .. "/o \\{}/ o\\     " .. colors.NOCOL,
            colors.BLUE .. "\\   ()   /     " .. colors.NOCOL,
            colors.BLUE .. " (o/\\/\\o)      " .. colors.NOCOL
        }
        --  __ \/ __      
        -- /o \{}/ o\     
        -- \   ()   /     
        --  (o/\/\o)      
        return ascii

    else -- AKA unknown / Not supported yet
        math.randomseed(os.time())
        randomness = math.random()
        if randomness >= 0 and randomness <= 0.25 then -- Orange Cat
            local ascii = {
                colors.B_RED .. "  /'._         " .. colors.NOCOL,
                colors.B_RED .. " (" .. colors.B_GREEN .. "°" .. colors.CYAN .. " o" .. colors.B_RED .. " 7        " .. colors.NOCOL,
                colors.B_RED .. "  " ..colors.YELLOW.. "|" .. colors.B_RED .. "'-'".. colors.YELLOW .."\"~.  .   " .. colors.NOCOL,
                colors.B_RED .. "  Uu" .. colors.YELLOW .. "^~" .. colors.B_RED .. "C_J._.\"  " .. colors.NOCOL
            }
            return ascii
        elseif randomness >= 0.25 and randomness <= 0.5 then -- Black Cat
            local ascii = {
                colors.BLACK .. "  /'._         " .. colors.NOCOL,
                colors.BLACK .. " (" .. colors.GREEN .. "° o" .. colors.BLACK .. " 7        " .. colors.NOCOL,
                colors.BLACK .. "  |'-'\"~.  .   " .. colors.NOCOL,
                colors.BLACK .. "  Uu^~C_J._.\"  " .. colors.NOCOL
            }
            return ascii
        elseif randomness >= 0.5 and randomness <= 0.75 then -- Calico Cat
            local ascii = {
                colors.B_RED .. "  /'." .. colors.BLACK .. "_         " .. colors.NOCOL,
                " (" .. colors.GREEN .. "° o" .. colors.BLACK .. " 7        " .. colors.NOCOL,
                "  " .. colors.BLACK .. "|".. colors.WHITE .."'-'\"".. colors.B_RED .."~.  .   " .. colors.NOCOL,
                "  " .. colors.BLACK .. "U" .. colors.WHITE .. "u^" .. colors.B_RED .. "~C_J" .. colors.WHITE .. "._.\"  " .. colors.NOCOL
            }
            return ascii
        else -- if you get more than 0.75 you unlock my cat (his name is Sun and he's a tabby cat)
            local ascii = { -- what a mess...
                colors.BLACK .. "  /'._         " .. colors.NOCOL,
                colors.BLACK .. " (" .. colors.YELLOW .. "° o " .. colors.WHITE .. "7        " .. colors.NOCOL,
                colors.GRAY .. "  |".. colors.WHITE .."'-'".. colors.GRAY .."\"".. colors.BLACK .."~.  .   " .. colors.NOCOL,
                "  Uu^~C_J." .. colors.YELLOW .. "_".. colors.GRAY ..".".. colors.YELLOW .."\"  " .. colors.NOCOL
            }
            return ascii
        end
        -- GET DA KITTY!
        --  /'._         
        -- (° o 7        
        --  |'-'"~.  .  
        --  Uu^~C_J._." 
    end
    
end


--[[ INITIALIZZATION ]]
if pcall(debug.getlocal, 4, 1) then return fetch() else -- Check if file is run as a standalone or is imported
    local info = fetch() -- Initialize sys info
    -- local art = ascii(info) -- Disabled HERE because if this is declared BEFORE -n | --no-color flag is checked this will be always colored
    -- Re-enabled on needed
    if not arg[1] then
        local art = ascii(info.os)
        io.write(art[1] .. colors.RED    .. icons.os_icon .. colors.NOCOL .. info.os .. "\n")
        io.write(art[2] .. colors.YELLOW .. icons.wm_icon .. colors.NOCOL .. info.wm .. "\n")
        io.write(art[3] .. colors.GREEN  .. icons.kn_icon .. colors.NOCOL .. info.kn .. "\n")
        io.write(art[4] .. colors.CYAN   .. icons.sh_icon .. colors.NOCOL .. info.sh .. "\n")
    else
        for i=1,#arg,1 do
            
            if arg[i] == "--icons" or arg[i] == "-i" then
                icons.os_icon = "\u{f013}  "
                icons.wm_icon = "\u{f2d0}  "
                icons.kn_icon = "\u{f005}  "
                icons.sh_icon = "\u{f120}  "
                
            elseif arg[i] == "--help" or arg[i] == "-h" then
                    io.write([[
    SWEF 1.0 - The Should-Work-Everywhere-Fetch
    ===========================================
    usage: lua swef [-h | --help] [-i | --icons] [-n | --no-color]
    --help, -h        Display this message
    --icons, -i       Use fontawesome icons
    --no-color, -n    Don't display the colors

    ]])
                
            elseif arg[i] == "--no-color" or arg[i] == "-n" then
                colors.RED      = ''
                colors.GREEN    = ''
                colors.YELLOW   = ''
                colors.BLUE     = ''
                colors.PURPLE   = ''
                colors.CYAN     = ''
                colors.B_RED    = ''
                colors.B_GREEN  = ''
                colors.B_YELLOW = ''
                colors.B_BLUE   = ''
                colors.B_PURPLE = ''
                colors.B_CYAN   = ''
                colors.BLACK    = ''
                colors.GRAY     = ''
                colors.B_GRAY   = ''
                colors.WHITE    = ''
                colors.NOCOL    = ''
            end
        end
        
        local art = ascii(info.os)

        io.write(art[1] .. colors.RED    .. icons.os_icon .. colors.NOCOL .. info.os .. "\n")
        io.write(art[2] .. colors.YELLOW .. icons.wm_icon .. colors.NOCOL .. info.wm .. "\n")
        io.write(art[3] .. colors.GREEN  .. icons.kn_icon .. colors.NOCOL .. info.kn .. "\n")
        io.write(art[4] .. colors.CYAN   .. icons.sh_icon .. colors.NOCOL .. info.sh .. "\n")
    end
end
